#!/bin/bash
#
# This script is used to update the firmware of the nav.HAT microcontroller.
# The latest firmware will be loaded automatically form an online repository.
# 
# Ensure that you have the I2C module and the flashing tool compiled (see 
# https://github.com/mr-rooney/nav.HAT for further information). You might
# need to change the paths below.
#
# Usage: ./fw_update_navHAT -h

navHatDriver=naviDev                                        # the name of the nav.HAT driver module
flasher=./stm32flash                                        # STM32 flasher (path/file name)
i2cDriver=i2c-gpio-param.ko                                 # I2C bit-banged driver module
repo=https://github.com/mr-rooney/nav.HAT-firmware.git      # repository holding the latest HAT firmware
fwPath=fw                                                   # the path to store the firmware
fwFileRemote=$fwPath/application.binary                     # path + file name of the firmware, if loaded from the remote repository

unload()
{
    echo "INFO: Unloading \"$1\"."
	rmmod $1
}

help()
{
    echo
    echo "******************************************************************************************"
    echo "This script is used to flash the STM32 microcontroller on the nav.HAT."
    echo       
    echo "One of the following options can be applied:"
    echo "    -r : Will load the latest firmware release from the remote repository $repo."
    echo "         The firmware will be located in \"${pwd}/${fwFileRemote}\"."
    echo "    -s : Specifies the firmware that should be used."
    echo "         This option requires the path + filename as parameter"
    echo
    echo "Note: Options -s and -r must not be applied at the same time!!"
    echo "******************************************************************************************"
    echo
}

error()
{
    echo
    echo "******************************************************************************************"
    echo "ERROR occured!!"
    echo
    echo $1
    echo "******************************************************************************************"
    echo
}

pwd=$(pwd)

rOption=0
sOption=0
fwFile=""

help

while getopts 'rs:h' option
do
    case $option in
        r) rOption=1
            ;;
        s) sOption=1
           fwFile="$OPTARG"
            ;;
        h) exit 0
            ;;
        \?) echo
            error "Invalid option."
            exit 1
            ;;
    esac
done

if [ "$EUID" -ne 0 ]
then 
    error "You must run this script with root privileges."
    exit
fi

if [ $rOption == "1" -a $sOption == "1" ]
then
    error "Option -r and -s must not be applied at the same time."
    exit 1
fi

if [ $rOption == "0" -a $sOption == "0" ]
then
    error "Option -r or -s must be applied."
    exit 1
fi

if [ ! -e $flasher ]
then
    error "The flasher \"$flasher\" is missing."
    exit 1
fi

if [ ! -e $i2cDriver ]
then
    error "The I2C driver \"$i2cDriver\" is missing."
    exit 1
fi

if [ $rOption -eq 1 ]
then
    fwFile=$fwFileRemote

    echo "INFO: Loading latest firmware binary form \"$repo\"."
    if [ -e $fwFile ]
    then
        echo "WARNING: The firmware file \"$fwFile\" already exists."
        
        while true
	    do
		    read -r -p "Overwrite? [y/n]" answer
		    if ([ "$answer" != "y" ] && [ "$answer" != "n" ])
		    then
			    echo "Wrong entry... Try again."
		    else
			    if [ "$answer" = "n" ]
			    then
				    exit 1
			    elif [ "$answer" = "y" ]
			    then
			        rm -r $fwFile
			        rm -r $fwPath
				    break
			    fi
		    fi
	    done
    fi

    git clone $repo fw
    if [ $? -ne 0 ]
    then
        error "Getting firmware from remote respository failed."
        exit 1
    fi   
fi

if [ ! -e $fwFile ]
then
    error "The firmware file \"$fwFile\" is missing."
    exit 1
fi

echo 
echo "**************************************************************************************"
echo "The firmware file \"${fwFile}\" is used for the update"
echo "**************************************************************************************"
echo 

echo "INFO: Loading driver \"$i2cDriver\"."
insmod $i2cDriver
if [ $? -ne 0 ]
then
    error "Could not load \"$i2cDriver\"."
    exit 1
fi   

echo "INFO: Creating I2C bus."
echo 5 2 3 2 100 > /sys/class/i2c-gpio/add_bus
if [ $? -ne 0 ]
then
    error "Could not create I2C bus."
    unload $i2cDriver
    exit 1
fi    

lsm=$(lsmod | grep $navHatDriver)
if [ $? -eq 0 ]
then
    echo "WARNING: Module \"$navHatDriver\" is loaded, we will unload to gain access to the required GPIO pins."
    unload $navHatDriver
fi 


echo "INFO: Flashing firmware."
$flasher -R -i 17,-18,18:-17,18,-18,18 -w $fwFile -v -g 0x00 -a 0x41 /dev/i2c-5
if [ $? -ne 0 ]
then
    error "Flashing firmware failed."
    unload $i2cDriver
    exit 1
fi   

echo 
echo "**************************************************************************************"
echo "*                                                                                    *"
echo "* FIRMWARE UPDATE SUCCESSFULL!!!                                                     *"
echo "*                                                                                    *"
echo "* Shutting down system. YOU NEED TO UNPLUG AND REPLUG THE POWER SUPPLY AFTERWARDS!!! *"
echo "*                                                                                    *"
echo "**************************************************************************************"
echo 
shutdown now

exit 0
